///-------------------------------------------------------------------
//*
//*	@作成日		2017/08/28
//*
//*	@名前		GameTitle.cpp
//*
//* @役割		ゲームタイトルシーンの処理クラス
//*
//*	@著者		加藤 彰馬
//*
///-------------------------------------------------------------------

// ヘッダのインクルード
#include "pch.h"
#include "WICTextureLoader.h"
#include "GameTitle.h"

// 名前空間
using namespace DirectX;
using namespace DirectX::SimpleMath;
using namespace Microsoft::WRL;



////////////////////////
//* メンバ変数の定義 *//
////////////////////////

////----------------------------------------------------------------------
////! @関数名：GameTitle
////!
////! @役割：タイトルのコンストラクタ
////!
////! @引数：なし(void)
////!
////! @戻り値：存在しない
////----------------------------------------------------------------------
GameTitle::GameTitle()
{
}

////----------------------------------------------------------------------
////! @関数名：~GameTitle
////!
////! @役割：タイトルのデストラクタ
////!
////! @引数：存在しない
////!
////! @戻り値：存在しない
////----------------------------------------------------------------------
GameTitle::~GameTitle()
{
}

////----------------------------------------------------------------------
////! @関数名：GameTitle
////!
////! @役割：タイトルの初期化
////!
////! @引数：レンダリングおよびリソースの作成に使用されるデバイス (ID3D11Device*)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void GameTitle::Initialize(ID3D11Device* device)
	//:m_pos.x(0.0f),m_pos.y(0.0f),m_title(nullptr)
{
	// テクスチャを初期化する
	//* NOTE:コムポインタは初期化もnullptr代入でOK？
	m_title = nullptr;

	// 絵をロードする
	CreateWICTextureFromFile(device, L"Images\\title.png", nullptr, m_title.GetAddressOf());
	
	// タイトル画像の初期位置
	m_pos.x = 0.0f;
	m_pos.y = 0.0f;
}

////----------------------------------------------------------------------
////! @関数名：Update
////!
////! @役割：タイトルの更新
////!
////! @引数：キーボード、キーボードの状態を見る何か
////!		 (DirectX::Keyboard* DirectX::Keyboard::KeyboardStateTracker)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void GameTitle::Update(Keyboard* keyboard, Keyboard::KeyboardStateTracker* keyboardTracker)
{
	// キーボードの状態取得
	auto kb = keyboard->GetState();
	keyboardTracker->Update(kb);


	// スペースキーで消滅・プレイシーンへ
	if (kb.Space)
	{
		this->DestroyItself();
	}
}

////----------------------------------------------------------------------
////! @関数名：Render
////!
////! @役割：タイトルの描画
////!
////! @引数：スプライトバッチ (SpriteBatch*)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void GameTitle::Render(SpriteBatch* spriteBatch)
{
	//* NOTE:こちら↓の方が色々細かく設定できるっぽいが、最低限の描画で今は済ます
	//* タイトルの描画
	//spriteBatch->Draw(m_title.Get(), m_pos, nullptr, Colors::White,
	//	0.f, m_titleOrigin);

	spriteBatch->Draw(m_title.Get(), m_pos);
}

////----------------------------------------------------------------------
////! @関数名：DestroyItself
////!
////! @役割：スペースキーが押されたらデストラクタを実行する
////!
////! @引数：なし(void)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void GameTitle::DestroyItself()
{
	this->~GameTitle();
}
